@inject IDialogService DialogService

@code {
    protected void Handle(Action action)
    {
        try
        {
            action.Invoke();
        }
        catch (Exception ex)
        {
            //Task.Run(async () => await HandleException(ex));  // run & forget => otherweise its blocked and never showed
            var awaiter = HandleException(ex).ConfigureAwait(false).GetAwaiter();
            // awaiter.OnCompleted(() =>
            // {
            //     // do nothing
            // });
        }
    }

    async protected Task HandleAsync(Func<Task> actionAsync)
    {
        try
        {
            await actionAsync.Invoke();
        }
        catch (Exception ex)
        {
            await HandleException(ex);
        }
    }

    protected T? HandleFunc<T>(Func<T> func)
    {
        try
        {
            return func.Invoke();
        }
        catch (Exception ex)
        {
            //Task.Run(async () => await HandleException(ex));  // run & forget => otherweise its blocked and never showed
            var awaiter = HandleException(ex).ConfigureAwait(false).GetAwaiter();
            // awaiter.OnCompleted(() =>
            // {
            //     // do nothing
            // });

            return default(T);
        }
    }

    async protected Task<T?> HandleFuncAsync<T>(Func<Task<T>> func)
    {
        try
        {
            return await func.Invoke();
        }
        catch (Exception ex)
        {
            await HandleException(ex);
            return default(T);
        }
    }

    async private Task HandleException(Exception ex)
    {
        await DialogService.ShowMessageBox(
                "Error",
                ex.Message);
    }

    async protected Task ForceRenderComponent()
    {
        await Task.Delay(1);
        StateHasChanged();
    }
}