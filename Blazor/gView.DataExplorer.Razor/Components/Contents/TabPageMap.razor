@inherits BaseHandler
@implements IAsyncDisposable
@inject LeafletService Leaflet
@inject GeoTransformerService GeoTransformer
@inject MapRenderService MapRenderer
@inject ExplorerEventBusService EventBus

@if (MapControl != null)
{
    <LeafletMap Map="MapControl" />
}

@code {
    [Parameter] public IExplorerTabPage? FrameworkElement { get; set; }
    [Parameter] public IExplorerObject? CurrentExplorerObject { get; set; }

    public IExplorerTabPage? _currentFrameworkElement = null;
    public IExplorerObject? _currentExplorerObject = null;

    private LMap? MapControl { get; set; }
    private ImageLayer? ImageLayer = null;

    private ISpatialReference _mapSRef = new SpatialReference("epsg:3857");

    protected override Task OnInitializedAsync() => HandleAsync(async () =>
    {
        await base.OnInitializedAsync();
        MapRenderer.OnRefreshMapImage += OnRefreshMapImage;
        EventBus.OnExplorerTabPageChanged += OnExplorerTabPageChanged;
    });

    async protected override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await base.HandleAsync(async () =>
        {
            if (_currentExplorerObject == CurrentExplorerObject &&
        _currentFrameworkElement == FrameworkElement)
            {
                return; // nothing changed, do not destry map control
            }

            _currentExplorerObject = CurrentExplorerObject;
            _currentFrameworkElement = FrameworkElement;

            await DestroyMapControl();  // if already exists

            if (FrameworkElement == null || CurrentExplorerObject == null)
            {
                return;
            }

            var dataInstance = await CurrentExplorerObject.GetInstanceAsync();
            if (dataInstance == null)
            {
                return;
            }

            MapRenderer.InitMap(MapRenderer.CreateMap(_mapSRef));

            // IWebServiceClass? webServiceClass = null;
            // if (dataInstance is IWebFeatureClass && CurrentExplorerObject?.ParentExplorerObject != null)
            // {
            //     webServiceClass = (await CurrentExplorerObject.ParentExplorerObject.GetInstanceAsync()) as IWebServiceClass;
            // }

            var layerAdded = dataInstance switch
            {
                //IWebFeatureClass => MapRenderer.AddWebFeatureClass((IWebFeatureClass)dataInstance, webServiceClass,
                IFeatureClass => MapRenderer.AddFeatureClass((IFeatureClass)dataInstance),
                IRasterClass => MapRenderer.AddRasterClass((IRasterClass)dataInstance),
                IWebServiceClass => MapRenderer.AddWebServiceClass((IWebServiceClass)dataInstance),
                IFeatureDataset => await MapRenderer.AddFeatureDataset((IFeatureDataset)dataInstance),
                _ => throw new GeneralException($"Can't show spatial data from {dataInstance.GetType()}")
            };

            await FrameworkElement.SetExplorerObjectAsync(CurrentExplorerObject);
            CreateMapControl();
        });
    }

    async private Task OnMapViewReset(object sender, Event e)
    {
        if (MapControl == null)
        {
            return;
        }

        var bounds = await MapControl.GetBounds();
        var size = await MapControl.GetImageSize();

        if (ImageLayer == null)
        {
            ImageLayer = new ImageLayer("", bounds.SouthWest, bounds.NorthEast) { Opacity = 0.8f };
            await MapControl.AddLayer(ImageLayer);
        }
        else
        {
            await MapControl.UpdateImageLayer(ImageLayer, "", bounds.SouthWest, bounds.NorthEast);
        }

        using (var mutex = await FuzzyMutexAsync.LockAsync(MapControl.Id))
        {
            if (mutex.WasBlocked == false)
            {
                await OnRefreshMapImage(null);

                await Task.Delay(300);

                var mapBounds = GeoTransformer.FromWGS84(new Envelope(bounds.SouthWest.Lng, bounds.SouthWest.Lat, bounds.NorthEast.Lng, bounds.NorthEast.Lat), _mapSRef).Envelope;
                MapRenderer.SetBoundsAndSize(mapBounds, size.Width, size.Height);
                MapRenderer.BeginRender();
            }
        }
    }

    async private Task OnRefreshMapImage(byte[]? data)
    {
        if (ImageLayer == null || MapControl == null)
        {
            return;
        }

        await MapControl.UpdateImageLayer(ImageLayer, $"data:image/png;base64, {Convert.ToBase64String(data ?? Array.Empty<byte>())}", null, null);
    }

    private Task OnExplorerTabPageChanged(IExplorerTabPage? newPage, IExplorerTabPage? oldPage)
    {
        if(oldPage == FrameworkElement)
        {
            MapRenderer.CancelRender();
        }

        return Task.CompletedTask;
    }

    #region Create/Intialize Map

    public void CreateMapControl()
    {
        MapControl = Leaflet.CreateMap(MapControl?.Id);
        MapControl.OnIntialized += OnMapControlInitialized;

        //LeafletMap.OnViewReset += OnMapViewRest;
        MapControl.OnZoomEnd += OnMapViewReset;
        MapControl.OnMoveEnd += OnMapViewReset;
    }

    private Task OnMapControlInitialized() => HandleAsync(async () =>
    {
        IEnvelope? dataEnvelope = null;
        ISpatialReference? dataSRef = null;

        var exObject = FrameworkElement?.GetExplorerObject();
        if (exObject != null)
        {
            var instance = await exObject.GetInstanceAsync();

            dataEnvelope = instance switch
            {
                IFeatureClass fc => fc.Envelope,
                IRasterClass rc => rc.Polygon?.Envelope,
                IWebServiceClass wc => wc.Envelope,
                IFeatureDataset ds => await ds.Envelope(),
                _ => null
            };

            dataSRef = instance switch
            {
                IFeatureClass fc => fc.SpatialReference,
                IRasterClass rc => rc.SpatialReference,
                IWebServiceClass wc => wc.SpatialReference,
                IFeatureDataset ds => await ds.GetSpatialReference(),
                _ => null
            };
        }
        await MapControl!.AddLayer(new gView.Razor.Leaflet.Models.Layers.TileLayer()
        {
            UrlTemplate = "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
            Attribution = "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",
            Opacity = 0.5
        });

        IEnvelope? lMapBounds = null;
        if (dataSRef != null && dataEnvelope != null)
        {
            lMapBounds = GeoTransformer.ToWGS84(new Envelope(dataEnvelope), dataSRef).Envelope;
        }

        if (lMapBounds != null)
        {
            if (MapRenderer.BoundsIntialized())
            {
                var rendererBounds = GeoTransformer.ToWGS84(new Envelope(MapRenderer.Bounds), MapRenderer.SpatialReference).Envelope;
                if (lMapBounds.Contains(rendererBounds)) // stay in same Extent/Zoom
                {
                    lMapBounds = rendererBounds;
                }
            }

            await MapControl.FitBounds(new LatLng(lMapBounds.LowerLeft.Y, lMapBounds.LowerLeft.X),
                                       new LatLng(lMapBounds.UpperRight.Y, lMapBounds.UpperRight.X));
        }
    });

    #endregion

    #region Dispose / Destroy

    async public ValueTask DisposeAsync()
    {
        MapRenderer.OnRefreshMapImage -= OnRefreshMapImage;

        await DestroyMapControl();
    }

    async public ValueTask DestroyMapControl()
    {
        if (MapControl != null)
        {
            MapControl.OnIntialized -= OnMapControlInitialized;

            //LeafletMap.OnViewReset -= OnMapViewRest;
            MapControl.OnZoomEnd -= OnMapViewReset;
            MapControl.OnMoveEnd -= OnMapViewReset;

            await MapControl.Destroy();
            ImageLayer = null;
        }
    }

    #endregion
}